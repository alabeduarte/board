{"version":3,"sources":["Home.js","ipfsService.js","postsService.js","Board.js","Main.js","App.js","registerServiceWorker.js","index.js"],"names":["src_Home","state","handleCreate","_this","setState","created","v4_default","this","react_default","a","createElement","Redirect","to","pathname","Button_default","variant","color","onClick","Component","ipfsService","node","window","Ipfs","EXPERIMENTAL","pubsub","config","Addresses","Swarm","Promise","resolve","once","_ref","postsService","_asyncToGenerator","regenerator_default","mark","_callee4","hash","orbitdb","access","db","all","posts","add","wrap","_context4","prev","next","OrbitDB_default","write","docs","sent","_ref2","_callee","_context","load","abrupt","query","doc","stop","apply","arguments","Rx_default","BehaviorSubject","t0","t1","call","events","on","_callee2","_context2","_ref4","_callee3","post","_id","data","_context3","put","_objectSpread","_x3","_x","_x2","Board_Board","text","handleChange","event","target","value","resetPost","handleSubmit","preventDefault","service","loadPosts","props","match","params","subscribe","_this2","classes","onSubmit","noValidate","autoComplete","TextField_default","id","label","onChange","margin","List_default","className","list","map","ListItem_default","key","Card_default","card","CardContent_default","Typography_default","src_Board","Object","styles","maxWidth","minHeight","width","Main_Main","HashRouter","Switch","Route","exact","path","component","assign","es","awesomeGradient","red_default","concat","theme","palette","primary","main","overrides","MuiAppBar","colorPrimary","background","MuiButton","raisedPrimary","App_App","root","CssBaseline_default","react","src_App_0","flexGrow","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom_default","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f9be7d13.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport { Redirect } from 'react-router-dom';\nimport uuid from 'uuid/v4';\n\nclass Home extends React.Component {\n  state = {};\n\n  handleCreate = () => {\n    this.setState({ created: uuid() });\n  };\n\n  render() {\n    if (this.state.created) {\n      return (\n        <Redirect\n          to={{\n            pathname: `/board/${this.state.created}`,\n          }}\n        />\n      );\n    }\n\n    return (\n      <div>\n        <Button variant=\"raised\" color=\"primary\" onClick={this.handleCreate}>\n          New board\n        </Button>\n      </div>\n    );\n  }\n}\n\nHome.propTypes = {\n  match: PropTypes.object.isRequired,\n};\n\nexport default Home;\n","const getInstance = () => {\n  const node = new window.Ipfs({\n    EXPERIMENTAL: {\n      pubsub: true,\n    },\n    config: {\n      Addresses: {\n        Swarm: [\n          '/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star',\n        ],\n      },\n    },\n  });\n\n  return new Promise(resolve => {\n    node.once('ready', () => resolve(node));\n  });\n};\n\nexport default {\n  getInstance,\n};\n","import Rx from 'rxjs';\nimport OrbitDB from 'orbit-db';\nimport uuid from 'uuid/v4';\n\nconst ACCESS_TO_EVERYONE = '*';\n\nexport default async (hash, node) => {\n  const orbitdb = new OrbitDB(node);\n\n  const access = {\n    write: [ACCESS_TO_EVERYONE],\n  };\n\n  const db = await orbitdb.docs(hash, access);\n\n  const all = async () => {\n    await db.load();\n    return db.query(doc => doc);\n  };\n\n  const posts = new Rx.BehaviorSubject();\n  posts.next(await all());\n\n  db.events.on('replicated', async () => {\n    posts.next(await all());\n  });\n\n  const add = async post => {\n    const _id = post._id || uuid();\n    const data = await db.put({ ...post, ...{ _id } });\n    posts.next(await all());\n    return data;\n  };\n\n  return {\n    posts,\n    add,\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography';\nimport ipfsService from './ipfsService';\nimport postsService from './postsService';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  list: {\n    maxWidth: '400px',\n  },\n  card: {\n    minHeight: '80px',\n    width: '100%',\n  },\n};\n\nclass Board extends React.Component {\n  state = {\n    posts: [],\n    post: { text: '' },\n  };\n\n  componentDidMount() {\n    this.loadPosts();\n  }\n\n  async loadPosts() {\n    const hash = this.props.match.params.hash;\n    const node = await ipfsService.getInstance();\n    this.service = await postsService(hash, node);\n\n    this.service.posts.subscribe(posts => {\n      this.setState({ posts });\n    });\n  }\n\n  handleChange = event => {\n    const post = { text: event.target.value };\n    this.setState({ post });\n  };\n\n  resetPost = () => {\n    const post = { text: '' };\n    this.setState({ post });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    await this.service.add(this.state.post);\n    this.resetPost();\n  };\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"post\"\n            label=\"Post\"\n            value={this.state.post.text}\n            onChange={this.handleChange}\n            margin=\"normal\"\n          />\n        </form>\n\n        <List className={classes.list}>\n          {this.state.posts.map(post => (\n            <ListItem key={post._id}>\n              <Card className={classes.card}>\n                <CardContent>\n                  <Typography>{post.text}</Typography>\n                </CardContent>\n              </Card>\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n  }\n}\n\nBoard.propTypes = {\n  match: PropTypes.object.isRequired,\n  classes: PropTypes.object\n};\n\nexport default withStyles(styles)(Board);\n","import React from 'react';\nimport { path } from 'ramda';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport Home from './Home';\nimport Board from './Board';\n\nexport const Main = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/board/:hash\" component={(props) => <Board key={path(['match', 'params', 'hash'], props)} {...props} />} />\n    </Switch>\n  </HashRouter>\n);\n","import 'typeface-roboto';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Main } from './Main';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport red from '@material-ui/core/colors/red';\n\nimport './App.css';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n};\n\nconst awesomeGradient = `linear-gradient(45deg, ${red['A700']} 30%, ${\n  red[500]\n} 90%)`;\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: red['A700'] },\n  },\n  overrides: {\n    MuiAppBar: {\n      colorPrimary: {\n        background: awesomeGradient,\n      },\n    },\n    MuiButton: {\n      raisedPrimary: {\n        background: awesomeGradient,\n      },\n    },\n  },\n});\n\nclass App extends Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <MuiThemeProvider theme={theme}>\n        <div className={classes.root}>\n          <CssBaseline />\n          <Main />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);\n","/* eslint-disable */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'babel-polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}